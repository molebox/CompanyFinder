// <auto-generated />
using CompanyData.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CompanyData.Migrations
{
    [DbContext(typeof(CompanyDBContext))]
    [Migration("20180117123658_Focus")]
    partial class Focus
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CompanyData.Models.AboutUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AboutText");

                    b.HasKey("Id");

                    b.ToTable("AboutUs");
                });

            modelBuilder.Entity("CompanyData.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Password");

                    b.Property<string>("Username")
                        .HasMaxLength(50);

                    b.HasKey("AdminId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("CompanyData.Models.Companies", b =>
                {
                    b.Property<int>("CompanyId");

                    b.Property<string>("Bio");

                    b.Property<string>("CompanyName");

                    b.Property<string>("ContactPerson");

                    b.Property<string>("Email");

                    b.Property<int?>("FocusId");

                    b.Property<bool>("IsConsultantCompany");

                    b.Property<bool>("IsInternalSystemCompany");

                    b.Property<bool>("IsProductCompany");

                    b.Property<string>("Phone");

                    b.Property<int?>("SkillDetailId");

                    b.Property<int?>("SkillSetSkillId");

                    b.Property<string>("Website");

                    b.HasKey("CompanyId");

                    b.HasIndex("FocusId");

                    b.HasIndex("SkillDetailId");

                    b.HasIndex("SkillSetSkillId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("CompanyData.Models.CompanyCatagory", b =>
                {
                    b.Property<int>("CompCatId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<int>("JobCatId");

                    b.HasKey("CompCatId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("JobCatId");

                    b.ToTable("CompanyCatagory");
                });

            modelBuilder.Entity("CompanyData.Models.CompanyDetails", b =>
                {
                    b.Property<int>("CompanyDetailsId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<int>("SkillDetailId");

                    b.HasKey("CompanyDetailsId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SkillDetailId");

                    b.ToTable("CompanyDetails");
                });

            modelBuilder.Entity("CompanyData.Models.CompanyFocus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<int>("FocusId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FocusId");

                    b.ToTable("CompanyFocus");
                });

            modelBuilder.Entity("CompanyData.Models.CompanySkills", b =>
                {
                    b.Property<int>("CompSkillId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<int>("SkillId");

                    b.HasKey("CompSkillId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SkillId");

                    b.ToTable("CompanySkills");
                });

            modelBuilder.Entity("CompanyData.Models.ConstructionJunction", b =>
                {
                    b.Property<int>("ConstrucJuncid")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<int>("ConStructId");

                    b.HasKey("ConstrucJuncid");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ConStructId");

                    b.ToTable("ConstructionJunction");
                });

            modelBuilder.Entity("CompanyData.Models.ConstructionSkills", b =>
                {
                    b.Property<int>("ConStrucSkillId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConstrucName");

                    b.HasKey("ConStrucSkillId");

                    b.ToTable("ConstructionSkills");
                });

            modelBuilder.Entity("CompanyData.Models.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactAddress");

                    b.Property<string>("ContactEmail");

                    b.Property<string>("TagLine");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("CompanyData.Models.Focus", b =>
                {
                    b.Property<int>("FocusId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FocusType");

                    b.HasKey("FocusId");

                    b.ToTable("Focus");
                });

            modelBuilder.Entity("CompanyData.Models.HomePage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TagLine");

                    b.HasKey("Id");

                    b.ToTable("HomePage");
                });

            modelBuilder.Entity("CompanyData.Models.Images", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("ContentType");

                    b.Property<byte[]>("Data");

                    b.Property<int>("Height");

                    b.Property<int>("Length");

                    b.Property<string>("Name");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("CompanyData.Models.JobCatagory", b =>
                {
                    b.Property<int>("JobCatId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("JobName");

                    b.HasKey("JobCatId");

                    b.ToTable("JobCatagory");
                });

            modelBuilder.Entity("CompanyData.Models.SkillDetail", b =>
                {
                    b.Property<int>("SkillDetailId");

                    b.Property<string>("DetailName");

                    b.HasKey("SkillDetailId");

                    b.ToTable("SkillDetail");
                });

            modelBuilder.Entity("CompanyData.Models.SkillSet", b =>
                {
                    b.Property<int>("SkillId");

                    b.Property<string>("SkillName");

                    b.HasKey("SkillId");

                    b.ToTable("SkillSet");
                });

            modelBuilder.Entity("CompanyData.Models.Companies", b =>
                {
                    b.HasOne("CompanyData.Models.Focus")
                        .WithMany("Companies")
                        .HasForeignKey("FocusId");

                    b.HasOne("CompanyData.Models.SkillDetail")
                        .WithMany("Companies")
                        .HasForeignKey("SkillDetailId");

                    b.HasOne("CompanyData.Models.SkillSet")
                        .WithMany("Companies")
                        .HasForeignKey("SkillSetSkillId");
                });

            modelBuilder.Entity("CompanyData.Models.CompanyCatagory", b =>
                {
                    b.HasOne("CompanyData.Models.Companies", "Company")
                        .WithMany("CompanyCatagory")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CompanyData.Models.JobCatagory", "JobCat")
                        .WithMany("CompanyCatagory")
                        .HasForeignKey("JobCatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CompanyData.Models.CompanyDetails", b =>
                {
                    b.HasOne("CompanyData.Models.Companies", "Company")
                        .WithMany("CompanyDetails")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CompanyData.Models.SkillDetail", "SkillDetail")
                        .WithMany()
                        .HasForeignKey("SkillDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CompanyData.Models.CompanyFocus", b =>
                {
                    b.HasOne("CompanyData.Models.Companies", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CompanyData.Models.Focus", "Focus")
                        .WithMany()
                        .HasForeignKey("FocusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CompanyData.Models.CompanySkills", b =>
                {
                    b.HasOne("CompanyData.Models.Companies", "Company")
                        .WithMany("CompanySkills")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CompanyData.Models.SkillSet", "SkillSet")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CompanyData.Models.ConstructionJunction", b =>
                {
                    b.HasOne("CompanyData.Models.Companies", "Company")
                        .WithMany("ConstructionJunction")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CompanyData.Models.ConstructionSkills", "ConStruct")
                        .WithMany("ConstructionJunction")
                        .HasForeignKey("ConStructId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
